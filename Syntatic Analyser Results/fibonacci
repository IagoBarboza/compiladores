   1  function none fibonacci( int limiter ) { 
          Program = LDecl
          Decl = FuncDecl
          FuncDecl = 'function' FType 'id' '(' LParam ')' '{' LSent '}'
              [0001, 0001] (0042,             FUNCTION) {function}
          FType = 'none'
              [0001, 0003] (0002,                TNONE) {none}
              [0001, 0005] (0001,                   ID) {fibonacci}
              [0001, 0006] (0010,           PARAMBEGIN) {(}
          LParam = Param LParamR
          Param = Type 'id' ParamR
          Type = 'int'
              [0001, 0008] (0003,                 TINT) {int}
              [0001, 0010] (0001,                   ID) {limiter}
          ParamR = epsilon
          LParamR = epsilon
              [0001, 0012] (0011,             PARAMEND) {)}
              [0001, 0014] (0008,           SCOPEBEGIN) {{}
   2  	var int counter#
          LSent = Sent LSent
          Sent = VarDecl
          VarDecl = 'var' Type 'id' VarDeclAux '#'
              [0002, 0002] (0043,                  VAR) {var}
          Type = 'int'
              [0002, 0004] (0003,                 TINT) {int}
              [0002, 0006] (0001,                   ID) {counter}
          VarDeclAux = epsilon
              [0002, 0007] (0014,                 TERM) {#}
   4  	var int fib1 = 1#
          LSent = Sent LSent
          Sent = VarDecl
          VarDecl = 'var' Type 'id' VarDeclAux '#'
              [0004, 0002] (0043,                  VAR) {var}
          Type = 'int'
              [0004, 0004] (0003,                 TINT) {int}
              [0004, 0006] (0001,                   ID) {fib1}
          VarDeclAux = Atr
          Atr = '=' ConcatExp
              [0004, 0008] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0004, 0010] (0017,          INTNUMCONST) {1}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0004, 0011] (0014,                 TERM) {#}
   5  	var int fib2 = 1#
          LSent = Sent LSent
          Sent = VarDecl
          VarDecl = 'var' Type 'id' VarDeclAux '#'
              [0005, 0002] (0043,                  VAR) {var}
          Type = 'int'
              [0005, 0004] (0003,                 TINT) {int}
              [0005, 0006] (0001,                   ID) {fib2}
          VarDeclAux = Atr
          Atr = '=' ConcatExp
              [0005, 0008] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0005, 0010] (0017,          INTNUMCONST) {1}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0005, 0011] (0014,                 TERM) {#}
   6  	var int fib3#
          LSent = Sent LSent
          Sent = VarDecl
          VarDecl = 'var' Type 'id' VarDeclAux '#'
              [0006, 0002] (0043,                  VAR) {var}
          Type = 'int'
              [0006, 0004] (0003,                 TINT) {int}
              [0006, 0006] (0001,                   ID) {fib3}
          VarDeclAux = epsilon
              [0006, 0007] (0014,                 TERM) {#}
   8  	if(limiter == 0){
          LSent = Sent LSent
          Sent = Command
          Command = If 
          If = 'if' '(' BooleanExp ')' '{' LSent '}' Else
              [0008, 0002] (0025,                 RWIF) {if}
              [0008, 0003] (0010,           PARAMBEGIN) {(}
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0008, 0004] (0001,                   ID) {limiter}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = 'relOp' AritExp BooleanTermR
              [0008, 0006] (0039,                RELOP) {==}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0008, 0008] (0017,          INTNUMCONST) {0}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
              [0008, 0009] (0011,             PARAMEND) {)}
              [0008, 0010] (0008,           SCOPEBEGIN) {{}
   9  		print('0')#
          LSent = Sent LSent
          Sent = Command
          Command = Print '#'
          Print = 'print' '(' ConcatExp ')'
              [0009, 0003] (0023,              RWPRINT) {print}
              [0009, 0004] (0010,           PARAMBEGIN) {(}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'charConst'
              [0009, 0005] (0020,            CHARCONST) {'0'}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0009, 0006] (0011,             PARAMEND) {)}
              [0009, 0007] (0014,                 TERM) {#}
  10  	}
          LSent = epsilon
              [0010, 0002] (0009,             SCOPEEND) {}}
  11  	
  12  	while(counter < limiter){
          Else = 'epsilon'
          LSent = Sent LSent
          Sent = Command
          Command = While 
          While = 'while' '(' BooleanExp ')' '{' LSent '}'
              [0012, 0002] (0030,              RWWHILE) {while}
              [0012, 0003] (0010,           PARAMBEGIN) {(}
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0012, 0004] (0001,                   ID) {counter}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = 'relOp' AritExp BooleanTermR
              [0012, 0006] (0039,                RELOP) {<}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0012, 0008] (0001,                   ID) {limiter}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
              [0012, 0009] (0011,             PARAMEND) {)}
              [0012, 0010] (0008,           SCOPEBEGIN) {{}
  13  		if(counter < 2){
          LSent = Sent LSent
          Sent = Command
          Command = If 
          If = 'if' '(' BooleanExp ')' '{' LSent '}' Else
              [0013, 0003] (0025,                 RWIF) {if}
              [0013, 0004] (0010,           PARAMBEGIN) {(}
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0013, 0005] (0001,                   ID) {counter}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = 'relOp' AritExp BooleanTermR
              [0013, 0007] (0039,                RELOP) {<}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0013, 0009] (0017,          INTNUMCONST) {2}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
              [0013, 0010] (0011,             PARAMEND) {)}
              [0013, 0011] (0008,           SCOPEBEGIN) {{}
  14  			print('1')#
          LSent = Sent LSent
          Sent = Command
          Command = Print '#'
          Print = 'print' '(' ConcatExp ')'
              [0014, 0004] (0023,              RWPRINT) {print}
              [0014, 0005] (0010,           PARAMBEGIN) {(}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'charConst'
              [0014, 0006] (0020,            CHARCONST) {'1'}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0014, 0007] (0011,             PARAMEND) {)}
              [0014, 0008] (0014,                 TERM) {#}
  15  		}
          LSent = epsilon
              [0015, 0003] (0009,             SCOPEEND) {}}
  16  		else{
          Else = 'else' '{' LSent '}' Else
              [0016, 0003] (0026,               RWELSE) {else}
              [0016, 0004] (0008,           SCOPEBEGIN) {{}
  17  			fib3 = fib1 + fib2#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0017, 0004] (0001,                   ID) {fib3}
          CommandR = Atr
          Atr = '=' ConcatExp
              [0017, 0006] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0017, 0008] (0001,                   ID) {fib1}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = 'addAritOp' AritTerm AritExpR
              [0017, 0010] (0035,            ADDARITOP) {+}
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0017, 0012] (0001,                   ID) {fib2}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0017, 0013] (0014,                 TERM) {#}
  18  			fib1 = fib2#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0018, 0004] (0001,                   ID) {fib1}
          CommandR = Atr
          Atr = '=' ConcatExp
              [0018, 0006] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0018, 0008] (0001,                   ID) {fib2}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0018, 0009] (0014,                 TERM) {#}
  19  			fib2 = fib3#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0019, 0004] (0001,                   ID) {fib2}
          CommandR = Atr
          Atr = '=' ConcatExp
              [0019, 0006] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0019, 0008] (0001,                   ID) {fib3}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0019, 0009] (0014,                 TERM) {#}
  20  		}
          LSent = epsilon
              [0020, 0003] (0009,             SCOPEEND) {}}
  21  		counter = counter + 1#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0021, 0003] (0001,                   ID) {counter}
          CommandR = Atr
          Atr = '=' ConcatExp
              [0021, 0005] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0021, 0007] (0001,                   ID) {counter}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = 'addAritOp' AritTerm AritExpR
              [0021, 0009] (0035,            ADDARITOP) {+}
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0021, 0011] (0017,          INTNUMCONST) {1}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0021, 0012] (0014,                 TERM) {#}
  22  	}
          LSent = epsilon
              [0022, 0002] (0009,             SCOPEEND) {}}
  23  }
          LSent = epsilon
              [0023, 0001] (0009,             SCOPEEND) {}}
  25  function none main(){
          LDeclr = Decl LDeclr
          Decl = FuncDecl
          FuncDecl = 'function' FType 'id' '(' LParam ')' '{' LSent '}'
              [0025, 0001] (0042,             FUNCTION) {function}
          FType = 'none'
              [0025, 0003] (0002,                TNONE) {none}
              [0025, 0005] (0001,                   ID) {main}
              [0025, 0006] (0010,           PARAMBEGIN) {(}
          LParam = epsilon
              [0025, 0007] (0011,             PARAMEND) {)}
              [0025, 0008] (0008,           SCOPEBEGIN) {{}
  26  	var int limit#
          LSent = Sent LSent
          Sent = VarDecl
          VarDecl = 'var' Type 'id' VarDeclAux '#'
              [0026, 0002] (0043,                  VAR) {var}
          Type = 'int'
              [0026, 0004] (0003,                 TINT) {int}
              [0026, 0006] (0001,                   ID) {limit}
          VarDeclAux = epsilon
              [0026, 0007] (0014,                 TERM) {#}
  27  	read(limit)#
          LSent = Sent LSent
          Sent = Command
          Command = Read '#'
          Read = 'read' '(' LReadParam ')'
              [0027, 0002] (0022,               RWREAD) {read}
              [0027, 0003] (0010,           PARAMBEGIN) {(}
          LReadParam = ReadParam LReadParamR
          ReadParam = 'id' ReadParamR
              [0027, 0004] (0001,                   ID) {limit}
          ReadParamR = epsilon
          LReadParamR = epsilon
              [0027, 0005] (0011,             PARAMEND) {)}
              [0027, 0006] (0014,                 TERM) {#}
  28  	fibonacci(limit)#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0028, 0002] (0001,                   ID) {fibonacci}
          CommandR = '(' LArg ')'
              [0028, 0003] (0010,           PARAMBEGIN) {(}
          LArg = Arg LArgR
          Arg = ConcatExp
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0028, 0004] (0001,                   ID) {limit}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
          LArgR = epsilon
              [0028, 0005] (0011,             PARAMEND) {)}
              [0028, 0006] (0014,                 TERM) {#}
  29  }
          LSent = epsilon
              [0029, 0001] (0009,             SCOPEEND) {}}
          LDeclr = epsilon