   1  function none shellSort(int nums[]){
          Program = LDecl
          Decl = FuncDecl
          FuncDecl = 'function' FType 'id' '(' LParam ')' '{' LSent '}'
              [0001, 0001] (0042,             FUNCTION) {function}
          FType = 'none'
              [0001, 0003] (0002,                TNONE) {none}
              [0001, 0005] (0001,                   ID) {shellSort}
              [0001, 0006] (0010,           PARAMBEGIN) {(}
          LParam = Param LParamR
          Param = Type 'id' ParamR
          Type = 'int'
              [0001, 0007] (0003,                 TINT) {int}
              [0001, 0009] (0001,                   ID) {nums}
          ParamR = '[' ']'
              [0001, 0010] (0012,           ARRAYBEGIN) {[}
              [0001, 0011] (0013,             ARRAYEND) {]}
          LParamR = epsilon
              [0001, 0012] (0011,             PARAMEND) {)}
              [0001, 0013] (0008,           SCOPEBEGIN) {{}
   2    var int gap = 1#
          LSent = Sent LSent
          Sent = VarDecl
          VarDecl = 'var' Type 'id' VarDeclAux '#'
              [0002, 0003] (0043,                  VAR) {var}
          Type = 'int'
              [0002, 0005] (0003,                 TINT) {int}
              [0002, 0007] (0001,                   ID) {gap}
          VarDeclAux = Atr
          Atr = '=' ConcatExp
              [0002, 0009] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0002, 0011] (0017,          INTNUMCONST) {1}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0002, 0012] (0014,                 TERM) {#}
   3    var int n = length(nums)#
          LSent = Sent LSent
          Sent = VarDecl
          VarDecl = 'var' Type 'id' VarDeclAux '#'
              [0003, 0003] (0043,                  VAR) {var}
          Type = 'int'
              [0003, 0005] (0003,                 TINT) {int}
              [0003, 0007] (0001,                   ID) {n}
          VarDeclAux = Atr
          Atr = '=' ConcatExp
              [0003, 0009] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0003, 0011] (0001,                   ID) {length}
          AritFactR = '(' LArg ')'
              [0003, 0012] (0010,           PARAMBEGIN) {(}
          LArg = Arg LArgR
          Arg = ConcatExp
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0003, 0013] (0001,                   ID) {nums}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
          LArgR = epsilon
              [0003, 0014] (0011,             PARAMEND) {)}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0003, 0015] (0014,                 TERM) {#}
   4    while(gap < n) {
          LSent = Sent LSent
          Sent = Command
          Command = While 
          While = 'while' '(' BooleanExp ')' '{' LSent '}'
              [0004, 0003] (0030,              RWWHILE) {while}
              [0004, 0004] (0010,           PARAMBEGIN) {(}
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0004, 0005] (0001,                   ID) {gap}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = 'relOp' AritExp BooleanTermR
              [0004, 0007] (0039,                RELOP) {<}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0004, 0009] (0001,                   ID) {n}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
              [0004, 0010] (0011,             PARAMEND) {)}
              [0004, 0012] (0008,           SCOPEBEGIN) {{}
   5      gap = gap * 3 + 1#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0005, 0005] (0001,                   ID) {gap}
          CommandR = Atr
          Atr = '=' ConcatExp
              [0005, 0007] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0005, 0009] (0001,                   ID) {gap}
          AritFactR = epsilon
          AritExpR = 'multAritOp' AritFact AritTermR
              [0005, 0011] (0036,           MULTARITOP) {*}
          AritFact = 'intNumConst'
              [0005, 0013] (0017,          INTNUMCONST) {3}
          AritTermR = epsilon
          AritExpR = 'addAritOp' AritTerm AritExpR
              [0005, 0015] (0035,            ADDARITOP) {+}
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0005, 0017] (0017,          INTNUMCONST) {1}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0005, 0018] (0014,                 TERM) {#}
   6    }
          LSent = epsilon
              [0006, 0003] (0009,             SCOPEEND) {}}
   7    gap = h / 3#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0007, 0003] (0001,                   ID) {gap}
          CommandR = Atr
          Atr = '=' ConcatExp
              [0007, 0005] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0007, 0007] (0001,                   ID) {h}
          AritFactR = epsilon
          AritExpR = 'multAritOp' AritFact AritTermR
              [0007, 0009] (0036,           MULTARITOP) {/}
          AritFact = 'intNumConst'
              [0007, 0011] (0017,          INTNUMCONST) {3}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0007, 0012] (0014,                 TERM) {#}
   8    while (gap > 0){
          LSent = Sent LSent
          Sent = Command
          Command = While 
          While = 'while' '(' BooleanExp ')' '{' LSent '}'
              [0008, 0003] (0030,              RWWHILE) {while}
              [0008, 0005] (0010,           PARAMBEGIN) {(}
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0008, 0006] (0001,                   ID) {gap}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = 'relOp' AritExp BooleanTermR
              [0008, 0008] (0039,                RELOP) {>}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0008, 0010] (0017,          INTNUMCONST) {0}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
              [0008, 0011] (0011,             PARAMEND) {)}
              [0008, 0012] (0008,           SCOPEBEGIN) {{}
   9      var int i = 0#
          LSent = Sent LSent
          Sent = VarDecl
          VarDecl = 'var' Type 'id' VarDeclAux '#'
              [0009, 0005] (0043,                  VAR) {var}
          Type = 'int'
              [0009, 0007] (0003,                 TINT) {int}
              [0009, 0009] (0001,                   ID) {i}
          VarDeclAux = Atr
          Atr = '=' ConcatExp
              [0009, 0011] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0009, 0013] (0017,          INTNUMCONST) {0}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0009, 0014] (0014,                 TERM) {#}
  10      repeater(i of 0 to 10, 1) {
          LSent = Sent LSent
          Sent = Command
          Command = Repeater 
          Repeater = 'repeater' '(' 'id' 'of' AritExp 'to' AritExp ',' Step ')' '{' LSent '}'
              [0010, 0005] (0027,           RWREPEATER) {repeater}
              [0010, 0006] (0010,           PARAMBEGIN) {(}
              [0010, 0007] (0001,                   ID) {i}
              [0010, 0009] (0028,                 RWOF) {of}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0010, 0011] (0017,          INTNUMCONST) {0}
          AritTermR = epsilon
          AritExpR = epsilon
              [0010, 0013] (0029,                 RWTO) {to}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0010, 0015] (0017,          INTNUMCONST) {10}
          AritTermR = epsilon
          AritExpR = epsilon
              [0010, 0016] (0015,                COMMA) {,}
          Step = AritExp
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'intNumConst'
              [0010, 0018] (0017,          INTNUMCONST) {1}
          AritTermR = epsilon
          AritExpR = epsilon
              [0010, 0019] (0011,             PARAMEND) {)}
              [0010, 0021] (0008,           SCOPEBEGIN) {{}
  11        var int c = nums[i]#
          LSent = Sent LSent
          Sent = VarDecl
          VarDecl = 'var' Type 'id' VarDeclAux '#'
              [0011, 0007] (0043,                  VAR) {var}
          Type = 'int'
              [0011, 0009] (0003,                 TINT) {int}
              [0011, 0011] (0001,                   ID) {c}
          VarDeclAux = Atr
          Atr = '=' ConcatExp
              [0011, 0013] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0011, 0015] (0001,                   ID) {nums}
          AritFactR = '[' AritExp ']'
              [0011, 0016] (0012,           ARRAYBEGIN) {[}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0011, 0017] (0001,                   ID) {i}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
              [0011, 0018] (0013,             ARRAYEND) {]}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0011, 0019] (0014,                 TERM) {#}
  12        var int j = i#
          LSent = Sent LSent
          Sent = VarDecl
          VarDecl = 'var' Type 'id' VarDeclAux '#'
              [0012, 0007] (0043,                  VAR) {var}
          Type = 'int'
              [0012, 0009] (0003,                 TINT) {int}
              [0012, 0011] (0001,                   ID) {j}
          VarDeclAux = Atr
          Atr = '=' ConcatExp
              [0012, 0013] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0012, 0015] (0001,                   ID) {i}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0012, 0016] (0014,                 TERM) {#}
  13        while (j >= gap and nums[j - gap] > c) {
          LSent = Sent LSent
          Sent = Command
          Command = While 
          While = 'while' '(' BooleanExp ')' '{' LSent '}'
              [0013, 0007] (0030,              RWWHILE) {while}
              [0013, 0009] (0010,           PARAMBEGIN) {(}
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0013, 0010] (0001,                   ID) {j}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = 'relOp' AritExp BooleanTermR
              [0013, 0012] (0039,                RELOP) {>=}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0013, 0014] (0001,                   ID) {gap}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = 'logicOp' BooleanTerm BooleanExpR
              [0013, 0016] (0033,              LOGICOP) {and}
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0013, 0018] (0001,                   ID) {nums}
          AritFactR = '[' AritExp ']'
              [0013, 0019] (0012,           ARRAYBEGIN) {[}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0013, 0020] (0001,                   ID) {j}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = 'addAritOp' AritTerm AritExpR
              [0013, 0022] (0035,            ADDARITOP) {-}
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0013, 0024] (0001,                   ID) {gap}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
              [0013, 0025] (0013,             ARRAYEND) {]}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = 'relOp' AritExp BooleanTermR
              [0013, 0027] (0039,                RELOP) {>}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0013, 0029] (0001,                   ID) {c}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
              [0013, 0030] (0011,             PARAMEND) {)}
              [0013, 0032] (0008,           SCOPEBEGIN) {{}
  14          nums[j] = nums[j - gap]#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0014, 0009] (0001,                   ID) {nums}
          CommandR = '[' AritExp ']' Atr
              [0014, 0010] (0012,           ARRAYBEGIN) {[}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0014, 0011] (0001,                   ID) {j}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
              [0014, 0012] (0013,             ARRAYEND) {]}
          Atr = '=' ConcatExp
              [0014, 0014] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0014, 0016] (0001,                   ID) {nums}
          AritFactR = '[' AritExp ']'
              [0014, 0017] (0012,           ARRAYBEGIN) {[}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0014, 0018] (0001,                   ID) {j}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = 'addAritOp' AritTerm AritExpR
              [0014, 0020] (0035,            ADDARITOP) {-}
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0014, 0022] (0001,                   ID) {gap}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
              [0014, 0023] (0013,             ARRAYEND) {]}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0014, 0024] (0014,                 TERM) {#}
  15          j = j - gap#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0015, 0009] (0001,                   ID) {j}
          CommandR = Atr
          Atr = '=' ConcatExp
              [0015, 0011] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0015, 0013] (0001,                   ID) {j}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = 'addAritOp' AritTerm AritExpR
              [0015, 0015] (0035,            ADDARITOP) {-}
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0015, 0017] (0001,                   ID) {gap}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0015, 0018] (0014,                 TERM) {#}
  16        }
          LSent = epsilon
              [0016, 0007] (0009,             SCOPEEND) {}}
  17        nums[j] = c#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0017, 0007] (0001,                   ID) {nums}
          CommandR = '[' AritExp ']' Atr
              [0017, 0008] (0012,           ARRAYBEGIN) {[}
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0017, 0009] (0001,                   ID) {j}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
              [0017, 0010] (0013,             ARRAYEND) {]}
          Atr = '=' ConcatExp
              [0017, 0012] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0017, 0014] (0001,                   ID) {c}
          AritFactR = epsilon
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0017, 0015] (0014,                 TERM) {#}
  18      }
          LSent = epsilon
              [0018, 0005] (0009,             SCOPEEND) {}}
  19      gap = gap / 2#
          LSent = Sent LSent
          Sent = Command
          Command = 'id' CommandR '#'
              [0019, 0005] (0001,                   ID) {gap}
          CommandR = Atr
          Atr = '=' ConcatExp
              [0019, 0007] (0032,        ATTRIBUTIVEOP) {=}
          ConcatExp = BooleanExp ConcatExpR
          BooleanExp = BooleanTerm BooleanExpR
          BooleanTerm = AritExp BooleanTermR
          AritExp = AritTerm AritExpR
          AritTerm = AritFact AritTermR
          AritFact = 'id' AritFactR
              [0019, 0009] (0001,                   ID) {gap}
          AritFactR = epsilon
          AritExpR = 'multAritOp' AritFact AritTermR
              [0019, 0011] (0036,           MULTARITOP) {/}
          AritFact = 'intNumConst'
              [0019, 0013] (0017,          INTNUMCONST) {2}
          AritTermR = epsilon
          AritExpR = epsilon
          BooleanTermR = epsilon
          BooleanExpR = epsilon
          ConcatExpR = epsilon
              [0019, 0014] (0014,                 TERM) {#}
  20    }
          LSent = epsilon
              [0020, 0003] (0009,             SCOPEEND) {}}
  21   }
          LSent = epsilon
              [0021, 0002] (0009,             SCOPEEND) {}}
          LDeclr = epsilon